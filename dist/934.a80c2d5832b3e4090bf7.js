(self.webpackChunkchat_app=self.webpackChunkchat_app||[]).push([[934],{3934:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => /* binding */ ContactConversation\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(7294);\n// EXTERNAL MODULE: ./node_modules/react-router/esm/react-router.js\nvar react_router = __webpack_require__(6550);\n// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 15 modules\nvar es = __webpack_require__(4308);\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar axios = __webpack_require__(9669);\n// EXTERNAL MODULE: ./node_modules/socket.io-client/wrapper.mjs\nvar wrapper = __webpack_require__(5615);\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(5697);\n// EXTERNAL MODULE: ./client/js/components/utilities/Spinner.js\nvar Spinner = __webpack_require__(7679);\n// EXTERNAL MODULE: ./client/js/store/actions.js\nvar actions = __webpack_require__(1977);\n;// CONCATENATED MODULE: ./client/js/components/chunks/main/Messages.js\n\n\n\n\n\n\nvar axiosConfig = {\n  headers: {\n    Authorization: sessionStorage.getItem(\'jwt-token\')\n  }\n};\nvar Messages = /*#__PURE__*/(0,react.forwardRef)((props, ref) => {\n  var [loading, setLoading] = (0,react.useState)(false);\n  var messages = (0,es/* useSelector */.v9)(state => state.messages);\n  var dispatch = (0,es/* useDispatch */.I0)();\n  var target = (0,react.useRef)(null);\n  var ioCallback = (0,react.useCallback)((entries, observer) => {\n    if (entries[0].isIntersecting) {\n      setLoading(true);\n      (0,axios.post)(\'/api/messages\', {\n        id: props.id,\n        date: messages[0].timestamp.iso\n      }, axiosConfig).then((_ref) => {\n        var {\n          data\n        } = _ref;\n\n        if (data.messages.length) {\n          dispatch((0,actions/* add */.IH)(\'messages\', data.messages));\n          ref.current.scrollTo(0, ref.current.scrollHeight / 3);\n        } else {\n          observer.unobserve(target.current);\n        }\n\n        setLoading(false);\n      });\n    }\n  }, [messages]);\n  (0,react.useEffect)(() => {\n    var options = {\n      root: ref.current,\n      rootMargin: \'0px\',\n      threshold: 1.0\n    };\n    var observer = new IntersectionObserver(ioCallback, options);\n\n    if (target && target.current) {\n      observer.observe(target.current);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [ioCallback]);\n\n  if (!messages.length) {\n    return /*#__PURE__*/react.createElement("section", {\n      className: "flex--1 pd-l--md pd-r--md main__conversation"\n    });\n  }\n\n  return /*#__PURE__*/react.createElement("section", {\n    ref: ref,\n    className: "pos--rel flex--1 main__conversation"\n  }, loading && /*#__PURE__*/react.createElement(Spinner/* default */.Z, null), props.scrollable && /*#__PURE__*/react.createElement("div", {\n    ref: target\n  }), /*#__PURE__*/react.createElement("div", {\n    className: "pos--sticky d--flex jc--end flex--column pd-l--md pd-r--md main__conversation-wrap"\n  }, messages.map((_ref2) => {\n    var {\n      _id,\n      body,\n      isSelf,\n      timestamp,\n      notSent\n    } = _ref2;\n    return /*#__PURE__*/react.createElement("div", {\n      key: _id,\n      className: "pd-t--sm pd-b--sm ".concat(isSelf ? \'text--right\' : \'text--left\')\n    }, !!timestamp && /*#__PURE__*/react.createElement("span", {\n      className: "d--block font--sm text--gray"\n    }, timestamp.standard), /*#__PURE__*/react.createElement("p", {\n      className: "d--ib ".concat(isSelf ? \'bg--primary text--white text--right\' : \'bg--gray-lighter text--black text--left\', " b-rad--md pd--sm main__message")\n    }, body), !!notSent && /*#__PURE__*/react.createElement("span", {\n      className: "font--sm text--danger"\n    }, "Not sent"));\n  }), props.seen && /*#__PURE__*/react.createElement("i", {\n    className: "fa fa-check-circle pos--abs text--success main__seen"\n  })));\n});\nMessages.propTypes = {\n  id: prop_types.string.isRequired,\n  seen: prop_types.bool.isRequired,\n  scrollable: prop_types.bool.isRequired\n};\nMessages.displayName = \'Messages\';\n/* harmony default export */ const main_Messages = (Messages);\n;// CONCATENATED MODULE: ./client/js/components/chunks/main/MessageBox.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nvar socket = (0,wrapper/* default */.Z)("http://localhost:".concat(8000, "/messages"));\n\nfunction MessageBox(_ref) {\n  var {\n    convoId,\n    userId,\n    removeSeen\n  } = _ref;\n  var [message, setMessage] = (0,react.useState)(\'\');\n  var [, setBlocking] = (0,react.useState)(false);\n  var dispatch = (0,es/* useDispatch */.I0)();\n  var textarea = (0,react.useRef)(null);\n  (0,react.useEffect)(() => {\n    return () => {\n      setMessage(\'\');\n      setBlocking(false);\n    };\n  }, [convoId]);\n\n  function sendMessage() {\n    var config = {\n      headers: {\n        Authorization: sessionStorage.getItem(\'jwt-token\')\n      }\n    };\n    var randomId = Math.floor(Math.random() * 1000000);\n    var dummyData = {\n      _id: randomId,\n      body: message,\n      isSelf: true\n    };\n    dispatch((0,actions/* push */.VF)(\'messages\', dummyData));\n    setMessage(\'\');\n    textarea.current.value = \'\';\n    (0,axios.post)(\'/api/messages/store\', {\n      id: convoId,\n      message\n    }, config).then((_ref2) => {\n      var {\n        data\n      } = _ref2;\n      dispatch((0,actions/* update */.Vx)(\'messages\', randomId, data.message));\n      socket.emit(\'send message\', {\n        id: userId,\n        message: data.message\n      });\n    }).catch(() => {\n      dispatch((0,actions/* update */.Vx)(\'messages\', randomId, _objectSpread(_objectSpread({}, dummyData), {}, {\n        notSent: true\n      })));\n    });\n  }\n\n  function checkPressedKey(event) {\n    if ((event.keyCode === 13 || event.key === \'Enter\') && !event.shiftKey) {\n      if (!message.trim().length) {\n        return;\n      }\n\n      event.preventDefault();\n      sendMessage();\n      removeSeen();\n    }\n\n    return;\n  }\n\n  function handleValue(event) {\n    setMessage(event.target.value);\n  }\n\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("section", {\n    className: "pos--sticky main__message-container"\n  }, /*#__PURE__*/react.createElement("textarea", {\n    ref: textarea,\n    className: "full-width bt--1 b--gray-lighter pd--sm main__message-box",\n    placeholder: "Write your message here",\n    value: message,\n    onChange: handleValue,\n    onKeyPress: checkPressedKey\n  })), /*#__PURE__*/react.createElement(react_router/* Prompt */.NL, {\n    when: !!message.length,\n    message: "You haven\'t send your message yet. Proceed?"\n  }));\n}\n\nMessageBox.propTypes = {\n  convoId: prop_types.string.isRequired,\n  userId: prop_types.string.isRequired,\n  removeSeen: prop_types.func.isRequired\n};\n/* harmony default export */ const main_MessageBox = (MessageBox);\n// EXTERNAL MODULE: ./client/js/components/utilities/ProfilePhoto.js\nvar ProfilePhoto = __webpack_require__(4005);\n// EXTERNAL MODULE: ./client/js/components/utilities/LoadingMessagesContainer.js\nvar LoadingMessagesContainer = __webpack_require__(5122);\n;// CONCATENATED MODULE: ./client/js/components/chunks/main/ContactConversation.js\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n\n\n\n\n\n\n\n\n\n\nvar ContactConversation_axiosConfig = {\n  headers: {\n    Authorization: sessionStorage.getItem(\'jwt-token\')\n  }\n};\n/* harmony default export */ function ContactConversation() {\n  var [user, setUser] = (0,react.useState)({});\n  var [seen, setSeen] = (0,react.useState)(false);\n  var [scrollable, setScrollable] = (0,react.useState)(true);\n  var [loading, setLoading] = (0,react.useState)(false);\n  var messages = (0,es/* useSelector */.v9)(state => state.messages);\n  var dispatch = (0,es/* useDispatch */.I0)();\n  var {\n    convoId,\n    userId\n  } = (0,react_router/* useParams */.UO)();\n  var messagesContainer = (0,react.useRef)(null);\n  var socket = (0,wrapper/* default */.Z)("http://localhost:".concat(8000, "/messages"));\n  var {\n    _id\n  } = JSON.parse(localStorage.getItem(\'user\'));\n\n  function getContactInfoAndMessages() {\n    setLoading(true);\n    Promise.all([(0,axios.get)("/api/user/contact-info?id=".concat(userId), ContactConversation_axiosConfig), (0,axios.post)(\'/api/messages\', {\n      id: convoId,\n      date: new Date()\n    }, ContactConversation_axiosConfig), (0,axios.get)("/api/conversations/seen?convoId=".concat(convoId, "&userId=").concat(userId), ContactConversation_axiosConfig)]).then((_ref) => {\n      var [infoResponse, messagesResponse, convoResponse] = _ref;\n      setUser(infoResponse.data.user);\n      dispatch((0,actions/* set */.t8)(\'messages\', messagesResponse.data.messages));\n      setSeen(!!convoResponse.data.seen);\n      setLoading(false);\n      scrollToBottom();\n    });\n  }\n\n  function scrollToBottom() {\n    var container = messagesContainer.current;\n\n    if (container && container.scrollHeight > container.clientHeight) {\n      container.scrollTo(0, container.scrollHeight);\n    } else {\n      setScrollable(false);\n    }\n  }\n\n  function removeSeen() {\n    (0,axios.put)(\'/api/conversations/nullify-seener\', {\n      id: convoId\n    }, ContactConversation_axiosConfig);\n    setSeen(false);\n  }\n\n  (0,react.useEffect)(() => {\n    socket.on(\'receive message\', data => {\n      var {\n        receiverId\n      } = data,\n          body = _objectWithoutProperties(data, ["receiverId"]);\n\n      if (receiverId === _id) {\n        dispatch((0,actions/* push */.VF)(\'messages\', body));\n      }\n    });\n  }, []);\n  (0,react.useEffect)(() => {\n    getContactInfoAndMessages();\n    dispatch((0,actions/* set */.t8)(\'showSidebar\', false));\n  }, [convoId]);\n  (0,react.useEffect)(() => {\n    if (messages.length && !messages[messages.length - 1].isSelf) {\n      setSeen(false);\n      socket.emit(\'send user id\', convoId, _id);\n    }\n  }, [convoId, messages]);\n  (0,react.useEffect)(() => {\n    socket.on(\'seen\', (cid, uid) => {\n      if (convoId === cid && uid !== _id) {\n        setSeen(true);\n      }\n    });\n  }, [convoId]);\n\n  if (loading) {\n    return /*#__PURE__*/react.createElement(LoadingMessagesContainer/* default */.Z, null);\n  }\n\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("header", {\n    className: "pos--sticky d--flex ai--center bg--pale bb--1 b--gray-lighter pd--sm main__header"\n  }, /*#__PURE__*/react.createElement(ProfilePhoto/* default */.Z, {\n    imageClassName: "round",\n    imagePath: user.image_path,\n    gender: user.gender,\n    avatarSize: 33\n  }), /*#__PURE__*/react.createElement("h4", {\n    className: "mg-l--sm"\n  }, user.first_name, " ", user.last_name)), /*#__PURE__*/react.createElement(main_Messages, {\n    ref: messagesContainer,\n    id: convoId,\n    seen: seen,\n    scrollable: scrollable\n  }), /*#__PURE__*/react.createElement(main_MessageBox, {\n    convoId: convoId,\n    userId: userId,\n    removeSeen: removeSeen\n  }));\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0LWFwcC8uL2NsaWVudC9qcy9jb21wb25lbnRzL2NodW5rcy9tYWluL01lc3NhZ2VzLmpzPzY2YWIiLCJ3ZWJwYWNrOi8vY2hhdC1hcHAvLi9jbGllbnQvanMvY29tcG9uZW50cy9jaHVua3MvbWFpbi9NZXNzYWdlQm94LmpzPzY5YzEiLCJ3ZWJwYWNrOi8vY2hhdC1hcHAvLi9jbGllbnQvanMvY29tcG9uZW50cy9jaHVua3MvbWFpbi9Db250YWN0Q29udmVyc2F0aW9uLmpzP2RhZmMiXSwibmFtZXMiOlsiYXhpb3NDb25maWciLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsIk1lc3NhZ2VzIiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwibG9hZGluZyIsInNldExvYWRpbmciLCJ1c2VTdGF0ZSIsIm1lc3NhZ2VzIiwidXNlU2VsZWN0b3IiLCJzdGF0ZSIsImRpc3BhdGNoIiwidXNlRGlzcGF0Y2giLCJ0YXJnZXQiLCJ1c2VSZWYiLCJpb0NhbGxiYWNrIiwidXNlQ2FsbGJhY2siLCJlbnRyaWVzIiwib2JzZXJ2ZXIiLCJpc0ludGVyc2VjdGluZyIsImF4aW9zUG9zdCIsImlkIiwiZGF0ZSIsInRpbWVzdGFtcCIsImlzbyIsInRoZW4iLCJkYXRhIiwibGVuZ3RoIiwiYWRkIiwiY3VycmVudCIsInNjcm9sbFRvIiwic2Nyb2xsSGVpZ2h0IiwidW5vYnNlcnZlIiwidXNlRWZmZWN0Iiwib3B0aW9ucyIsInJvb3QiLCJyb290TWFyZ2luIiwidGhyZXNob2xkIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsInNjcm9sbGFibGUiLCJtYXAiLCJfaWQiLCJib2R5IiwiaXNTZWxmIiwibm90U2VudCIsInN0YW5kYXJkIiwic2VlbiIsInByb3BUeXBlcyIsInN0cmluZyIsImJvb2wiLCJpc1JlcXVpcmVkIiwiZGlzcGxheU5hbWUiLCJzb2NrZXQiLCJpbyIsInByb2Nlc3MiLCJNZXNzYWdlQm94IiwiY29udm9JZCIsInVzZXJJZCIsInJlbW92ZVNlZW4iLCJtZXNzYWdlIiwic2V0TWVzc2FnZSIsInNldEJsb2NraW5nIiwidGV4dGFyZWEiLCJzZW5kTWVzc2FnZSIsImNvbmZpZyIsInJhbmRvbUlkIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiZHVtbXlEYXRhIiwicHVzaCIsInZhbHVlIiwidXBkYXRlIiwiZW1pdCIsImNhdGNoIiwiY2hlY2tQcmVzc2VkS2V5IiwiZXZlbnQiLCJrZXlDb2RlIiwia2V5Iiwic2hpZnRLZXkiLCJ0cmltIiwicHJldmVudERlZmF1bHQiLCJoYW5kbGVWYWx1ZSIsImZ1bmMiLCJ1c2VyIiwic2V0VXNlciIsInNldFNlZW4iLCJzZXRTY3JvbGxhYmxlIiwidXNlUGFyYW1zIiwibWVzc2FnZXNDb250YWluZXIiLCJKU09OIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRDb250YWN0SW5mb0FuZE1lc3NhZ2VzIiwiUHJvbWlzZSIsImFsbCIsImF4aW9zR2V0IiwiRGF0ZSIsImluZm9SZXNwb25zZSIsIm1lc3NhZ2VzUmVzcG9uc2UiLCJjb252b1Jlc3BvbnNlIiwic2V0Iiwic2Nyb2xsVG9Cb3R0b20iLCJjb250YWluZXIiLCJjbGllbnRIZWlnaHQiLCJheGlvc1B1dCIsIm9uIiwicmVjZWl2ZXJJZCIsImNpZCIsInVpZCIsImltYWdlX3BhdGgiLCJnZW5kZXIiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTUEsV0FBVyxHQUFHO0FBQ2hCQyxTQUFPLEVBQUU7QUFBRUMsaUJBQWEsRUFBRUMsY0FBYyxDQUFDQyxPQUFmLENBQXVCLFdBQXZCO0FBQWpCO0FBRE8sQ0FBcEI7QUFJQSxJQUFNQyxRQUFRLGdCQUFHQyxvQkFBVSxDQUFDLENBQUNDLEtBQUQsRUFBUUMsR0FBUixLQUFnQjtB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OztBQUVELHNCQUNJLG9CQUFDLGNBQUQscUJBQ0k7QUFBUSxhQUFTLEVBQUM7QUFBbEIsa0JBQ0ksb0JBQUMsMkJBQUQ7QUFDSSxrQkFBYyxFQUFDLE9BRG5CO0FBRUksYUFBUyxFQUFFaUYsSUFBSSxDQUFDMEIsVUFGcEI7QUFHSSxVQUFNLEVBQUUxQixJQUFJLENBQUMyQixNQUhqQjtBQUlJLGNBQVUsRUFBRTtBQUpoQixJQURKLGVBUUk7QUFBSSxhQUFTLEVBQUM7QUFBZCxLQUNLM0IsSUFBSSxDQUFDNEIsVUFEVixPQUN1QjVCLElBQUksQ0FBQzZCLFNBRDVCLENBUkosQ0FESixlQWNJLG9CQUFDLGFBQUQ7QUFDSSxPQUFHLEVBQUV4QixpQkFEVDtBQUVJLE1BQUUsRUFBRWpDLE9BRlI7QUFHSSxRQUFJLEVBQUVWLElBSFY7QUFJSSxjQUFVLEVBQUVQO0FBSmhCLElBZEosZUFxQkksb0JBQUMsZUFBRDtBQUNJLFdBQU8sRUFBRWlCLE9BRGI7QUFFSSxVQUFNLEVBQUVDLE1BRlo7QUFHSSxjQUFVLEVBQUVDO0FBSGhCLElBckJKLENBREo7QUE2QkgiLCJmaWxlIjoiMzkzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge1xuICAgIHVzZVN0YXRlLFxuICAgIHVzZUVmZmVjdCxcbiAgICB1c2VSZWYsXG4gICAgdXNlQ2FsbGJhY2ssXG4gICAgZm9yd2FyZFJlZixcbn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgcG9zdCBhcyBheGlvc1Bvc3QgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBzdHJpbmcsIGJvb2wgfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBTcGlubmVyIGZyb20gJ1V0aWxpdGllcy9TcGlubmVyJztcbmltcG9ydCB7IGFkZCB9IGZyb20gJ0FjdGlvbnMnO1xuXG5jb25zdCBheGlvc0NvbmZpZyA9IHtcbiAgICBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2p3dC10b2tlbicpIH0sXG59O1xuXG5jb25zdCBNZXNzYWdlcyA9IGZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgbWVzc2FnZXMgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5tZXNzYWdlcyk7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IHRhcmdldCA9IHVzZVJlZihudWxsKTtcblxuICAgIGNvbnN0IGlvQ2FsbGJhY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoZW50cmllc1swXS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBheGlvc1Bvc3QoXG4gICAgICAgICAgICAgICAgICAgICcvYXBpL21lc3NhZ2VzJyxcbiAgICAgICAgICAgICAgICAgICAgeyBpZDogcHJvcHMuaWQsIGRhdGU6IG1lc3NhZ2VzWzBdLnRpbWVzdGFtcC5pc28gfSxcbiAgICAgICAgICAgICAgICAgICAgYXhpb3NDb25maWdcbiAgICAgICAgICAgICAgICApLnRoZW4oKHsgZGF0YSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm1lc3NhZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goYWRkKCdtZXNzYWdlcycsIGRhdGEubWVzc2FnZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZi5jdXJyZW50LnNjcm9sbFRvKDAsIHJlZi5jdXJyZW50LnNjcm9sbEhlaWdodCAvIDMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHRhcmdldC5jdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbbWVzc2FnZXNdXG4gICAgKTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICByb290OiByZWYuY3VycmVudCxcbiAgICAgICAgICAgIHJvb3RNYXJnaW46ICcwcHgnLFxuICAgICAgICAgICAgdGhyZXNob2xkOiAxLjAsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaW9DYWxsYmFjaywgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuY3VycmVudCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQuY3VycmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICB9O1xuICAgIH0sIFtpb0NhbGxiYWNrXSk7XG5cbiAgICBpZiAoIW1lc3NhZ2VzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3NOYW1lPSdmbGV4LS0xIHBkLWwtLW1kIHBkLXItLW1kIG1haW5fX2NvbnZlcnNhdGlvbicgLz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8c2VjdGlvbiByZWY9e3JlZn0gY2xhc3NOYW1lPSdwb3MtLXJlbCBmbGV4LS0xIG1haW5fX2NvbnZlcnNhdGlvbic+XG4gICAgICAgICAgICB7bG9hZGluZyAmJiA8U3Bpbm5lciAvPn1cbiAgICAgICAgICAgIHtwcm9wcy5zY3JvbGxhYmxlICYmIDxkaXYgcmVmPXt0YXJnZXR9PjwvZGl2Pn1cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Bvcy0tc3RpY2t5IGQtLWZsZXggamMtLWVuZCBmbGV4LS1jb2x1bW4gcGQtbC0tbWQgcGQtci0tbWQgbWFpbl9fY29udmVyc2F0aW9uLXdyYXAnPlxuICAgICAgICAgICAgICAgIHttZXNzYWdlcy5tYXAoKHsgX2lkLCBib2R5LCBpc1NlbGYsIHRpbWVzdGFtcCwgbm90U2VudCB9KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17X2lkfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgcGQtdC0tc20gcGQtYi0tc20gJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NlbGYgPyAndGV4dC0tcmlnaHQnIDogJ3RleHQtLWxlZnQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9YH0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7LyogTWVzc2FnZSB0aW1lc3RhbXAgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICB7ISF0aW1lc3RhbXAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZC0tYmxvY2sgZm9udC0tc20gdGV4dC0tZ3JheSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aW1lc3RhbXAuc3RhbmRhcmR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKiBNZXNzYWdlIGJvZHkgKi99XG4gICAgICAgICAgICAgICAgICAgICAgICA8cFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGQtLWliICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2VsZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAnYmctLXByaW1hcnkgdGV4dC0td2hpdGUgdGV4dC0tcmlnaHQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdiZy0tZ3JheS1saWdodGVyIHRleHQtLWJsYWNrIHRleHQtLWxlZnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBiLXJhZC0tbWQgcGQtLXNtIG1haW5fX21lc3NhZ2VgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Ym9keX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKiBNZXNzYWdlIHNlbnQgc3RhdHVzICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgeyEhbm90U2VudCAmJiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdmb250LS1zbSB0ZXh0LS1kYW5nZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3Qgc2VudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICkpfVxuXG4gICAgICAgICAgICAgICAge3Byb3BzLnNlZW4gJiYgKFxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9J2ZhIGZhLWNoZWNrLWNpcmNsZSBwb3MtLWFicyB0ZXh0LS1zdWNjZXNzIG1haW5fX3NlZW4nPjwvaT5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICApO1xufSk7XG5cbk1lc3NhZ2VzLnByb3BUeXBlcyA9IHtcbiAgICBpZDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc2VlbjogYm9vbC5pc1JlcXVpcmVkLFxuICAgIHNjcm9sbGFibGU6IGJvb2wuaXNSZXF1aXJlZCxcbn07XG5cbk1lc3NhZ2VzLmRpc3BsYXlOYW1lID0gJ01lc3NhZ2VzJztcblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZXM7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmLCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFByb21wdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBwb3N0IGFzIGF4aW9zUG9zdCB9IGZyb20gJ2F4aW9zJztcbmltcG9ydCBpbyBmcm9tICdzb2NrZXQuaW8tY2xpZW50JztcbmltcG9ydCB7IHN0cmluZywgZnVuYyB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgcHVzaCwgdXBkYXRlIH0gZnJvbSAnQWN0aW9ucyc7XG5cbmNvbnN0IHNvY2tldCA9IGlvKGBodHRwOi8vbG9jYWxob3N0OiR7cHJvY2Vzcy5lbnYuU0VSVkVSX1BPUlR9L21lc3NhZ2VzYCk7XG5cbmZ1bmN0aW9uIE1lc3NhZ2VCb3goeyBjb252b0lkLCB1c2VySWQsIHJlbW92ZVNlZW4gfSkge1xuICAgIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbLCBzZXRCbG9ja2luZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICAgIGNvbnN0IHRleHRhcmVhID0gdXNlUmVmKG51bGwpO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHNldE1lc3NhZ2UoJycpO1xuICAgICAgICAgICAgc2V0QmxvY2tpbmcoZmFsc2UpO1xuICAgICAgICB9O1xuICAgIH0sIFtjb252b0lkXSk7XG5cbiAgICBmdW5jdGlvbiBzZW5kTWVzc2FnZSgpIHtcbiAgICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICAgICAgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdqd3QtdG9rZW4nKSB9LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByYW5kb21JZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApO1xuICAgICAgICBjb25zdCBkdW1teURhdGEgPSB7IF9pZDogcmFuZG9tSWQsIGJvZHk6IG1lc3NhZ2UsIGlzU2VsZjogdHJ1ZSB9O1xuXG4gICAgICAgIGRpc3BhdGNoKHB1c2goJ21lc3NhZ2VzJywgZHVtbXlEYXRhKSk7XG4gICAgICAgIHNldE1lc3NhZ2UoJycpO1xuICAgICAgICB0ZXh0YXJlYS5jdXJyZW50LnZhbHVlID0gJyc7XG5cbiAgICAgICAgYXhpb3NQb3N0KCcvYXBpL21lc3NhZ2VzL3N0b3JlJywgeyBpZDogY29udm9JZCwgbWVzc2FnZSB9LCBjb25maWcpXG4gICAgICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh1cGRhdGUoJ21lc3NhZ2VzJywgcmFuZG9tSWQsIGRhdGEubWVzc2FnZSkpO1xuICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KCdzZW5kIG1lc3NhZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB1c2VySWQsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGRhdGEubWVzc2FnZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUoJ21lc3NhZ2VzJywgcmFuZG9tSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmR1bW15RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdFNlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrUHJlc3NlZEtleShldmVudCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoZXZlbnQua2V5Q29kZSA9PT0gMTMgfHwgZXZlbnQua2V5ID09PSAnRW50ZXInKSAmJlxuICAgICAgICAgICAgIWV2ZW50LnNoaWZ0S2V5XG4gICAgICAgICkge1xuICAgICAgICAgICAgaWYgKCFtZXNzYWdlLnRyaW0oKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBzZW5kTWVzc2FnZSgpO1xuICAgICAgICAgICAgcmVtb3ZlU2VlbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVZhbHVlKGV2ZW50KSB7XG4gICAgICAgIHNldE1lc3NhZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9J3Bvcy0tc3RpY2t5IG1haW5fX21lc3NhZ2UtY29udGFpbmVyJz5cbiAgICAgICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgICAgICAgcmVmPXt0ZXh0YXJlYX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdmdWxsLXdpZHRoIGJ0LS0xIGItLWdyYXktbGlnaHRlciBwZC0tc20gbWFpbl9fbWVzc2FnZS1ib3gnXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdXcml0ZSB5b3VyIG1lc3NhZ2UgaGVyZSdcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e21lc3NhZ2V9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgb25LZXlQcmVzcz17Y2hlY2tQcmVzc2VkS2V5fT48L3RleHRhcmVhPlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICAgICA8UHJvbXB0XG4gICAgICAgICAgICAgICAgd2hlbj17ISFtZXNzYWdlLmxlbmd0aH1cbiAgICAgICAgICAgICAgICBtZXNzYWdlPVwiWW91IGhhdmVuJ3Qgc2VuZCB5b3VyIG1lc3NhZ2UgeWV0LiBQcm9jZWVkP1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L0ZyYWdtZW50PlxuICAgICk7XG59XG5cbk1lc3NhZ2VCb3gucHJvcFR5cGVzID0ge1xuICAgIGNvbnZvSWQ6IHN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHVzZXJJZDogc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgcmVtb3ZlU2VlbjogZnVuYy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVzc2FnZUJveDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBnZXQgYXMgYXhpb3NHZXQsIHBvc3QgYXMgYXhpb3NQb3N0LCBwdXQgYXMgYXhpb3NQdXQgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgaW8gZnJvbSAnc29ja2V0LmlvLWNsaWVudCc7XG5pbXBvcnQgTWVzc2FnZXMgZnJvbSAnLi9NZXNzYWdlcyc7XG5pbXBvcnQgTWVzc2FnZUJveCBmcm9tICcuL01lc3NhZ2VCb3gnO1xuaW1wb3J0IFByb2ZpbGVQaG90byBmcm9tICdVdGlsaXRpZXMvUHJvZmlsZVBob3RvJztcbmltcG9ydCBMb2FkaW5nTWVzc2FnZXNDb250YWluZXIgZnJvbSAnVXRpbGl0aWVzL0xvYWRpbmdNZXNzYWdlc0NvbnRhaW5lcic7XG5pbXBvcnQgeyBzZXQsIHB1c2ggfSBmcm9tICdBY3Rpb25zJztcblxuY29uc3QgYXhpb3NDb25maWcgPSB7XG4gICAgaGVhZGVyczogeyBBdXRob3JpemF0aW9uOiBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdqd3QtdG9rZW4nKSB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IFt1c2VyLCBzZXRVc2VyXSA9IHVzZVN0YXRlKHt9KTtcbiAgICBjb25zdCBbc2Vlbiwgc2V0U2Vlbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW3Njcm9sbGFibGUsIHNldFNjcm9sbGFibGVdID0gdXNlU3RhdGUodHJ1ZSk7XG4gICAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IG1lc3NhZ2VzID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUubWVzc2FnZXMpO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgICBjb25zdCB7IGNvbnZvSWQsIHVzZXJJZCB9ID0gdXNlUGFyYW1zKCk7XG4gICAgY29uc3QgbWVzc2FnZXNDb250YWluZXIgPSB1c2VSZWYobnVsbCk7XG4gICAgY29uc3Qgc29ja2V0ID0gaW8oYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwcm9jZXNzLmVudi5TRVJWRVJfUE9SVH0vbWVzc2FnZXNgKTtcbiAgICBjb25zdCB7IF9pZCB9ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpKTtcblxuICAgIGZ1bmN0aW9uIGdldENvbnRhY3RJbmZvQW5kTWVzc2FnZXMoKSB7XG4gICAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG5cbiAgICAgICAgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgYXhpb3NHZXQoYC9hcGkvdXNlci9jb250YWN0LWluZm8/aWQ9JHt1c2VySWR9YCwgYXhpb3NDb25maWcpLFxuICAgICAgICAgICAgYXhpb3NQb3N0KFxuICAgICAgICAgICAgICAgICcvYXBpL21lc3NhZ2VzJyxcbiAgICAgICAgICAgICAgICB7IGlkOiBjb252b0lkLCBkYXRlOiBuZXcgRGF0ZSgpIH0sXG4gICAgICAgICAgICAgICAgYXhpb3NDb25maWdcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBheGlvc0dldChcbiAgICAgICAgICAgICAgICBgL2FwaS9jb252ZXJzYXRpb25zL3NlZW4/Y29udm9JZD0ke2NvbnZvSWR9JnVzZXJJZD0ke3VzZXJJZH1gLFxuICAgICAgICAgICAgICAgIGF4aW9zQ29uZmlnXG4gICAgICAgICAgICApLFxuICAgICAgICBdKS50aGVuKChbaW5mb1Jlc3BvbnNlLCBtZXNzYWdlc1Jlc3BvbnNlLCBjb252b1Jlc3BvbnNlXSkgPT4ge1xuICAgICAgICAgICAgc2V0VXNlcihpbmZvUmVzcG9uc2UuZGF0YS51c2VyKTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHNldCgnbWVzc2FnZXMnLCBtZXNzYWdlc1Jlc3BvbnNlLmRhdGEubWVzc2FnZXMpKTtcbiAgICAgICAgICAgIHNldFNlZW4oISFjb252b1Jlc3BvbnNlLmRhdGEuc2Vlbik7XG4gICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIHNjcm9sbFRvQm90dG9tKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvQm90dG9tKCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBtZXNzYWdlc0NvbnRhaW5lci5jdXJyZW50O1xuXG4gICAgICAgIGlmIChjb250YWluZXIgJiYgY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IGNvbnRhaW5lci5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5zY3JvbGxUbygwLCBjb250YWluZXIuc2Nyb2xsSGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFNjcm9sbGFibGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlU2VlbigpIHtcbiAgICAgICAgYXhpb3NQdXQoXG4gICAgICAgICAgICAnL2FwaS9jb252ZXJzYXRpb25zL251bGxpZnktc2VlbmVyJyxcbiAgICAgICAgICAgIHsgaWQ6IGNvbnZvSWQgfSxcbiAgICAgICAgICAgIGF4aW9zQ29uZmlnXG4gICAgICAgICk7XG4gICAgICAgIHNldFNlZW4oZmFsc2UpO1xuICAgIH1cblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHNvY2tldC5vbigncmVjZWl2ZSBtZXNzYWdlJywgZGF0YSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IHJlY2VpdmVySWQsIC4uLmJvZHkgfSA9IGRhdGE7XG5cbiAgICAgICAgICAgIGlmIChyZWNlaXZlcklkID09PSBfaWQpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChwdXNoKCdtZXNzYWdlcycsIGJvZHkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSwgW10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZ2V0Q29udGFjdEluZm9BbmRNZXNzYWdlcygpO1xuICAgICAgICBkaXNwYXRjaChzZXQoJ3Nob3dTaWRlYmFyJywgZmFsc2UpKTtcbiAgICB9LCBbY29udm9JZF0pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCAmJiAhbWVzc2FnZXNbbWVzc2FnZXMubGVuZ3RoIC0gMV0uaXNTZWxmKSB7XG4gICAgICAgICAgICBzZXRTZWVuKGZhbHNlKTtcbiAgICAgICAgICAgIHNvY2tldC5lbWl0KCdzZW5kIHVzZXIgaWQnLCBjb252b0lkLCBfaWQpO1xuICAgICAgICB9XG4gICAgfSwgW2NvbnZvSWQsIG1lc3NhZ2VzXSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBzb2NrZXQub24oJ3NlZW4nLCAoY2lkLCB1aWQpID0+IHtcbiAgICAgICAgICAgIGlmIChjb252b0lkID09PSBjaWQgJiYgdWlkICE9PSBfaWQpIHtcbiAgICAgICAgICAgICAgICBzZXRTZWVuKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9LCBbY29udm9JZF0pO1xuXG4gICAgaWYgKGxvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuIDxMb2FkaW5nTWVzc2FnZXNDb250YWluZXIgLz47XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEZyYWdtZW50PlxuICAgICAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9J3Bvcy0tc3RpY2t5IGQtLWZsZXggYWktLWNlbnRlciBiZy0tcGFsZSBiYi0tMSBiLS1ncmF5LWxpZ2h0ZXIgcGQtLXNtIG1haW5fX2hlYWRlcic+XG4gICAgICAgICAgICAgICAgPFByb2ZpbGVQaG90b1xuICAgICAgICAgICAgICAgICAgICBpbWFnZUNsYXNzTmFtZT0ncm91bmQnXG4gICAgICAgICAgICAgICAgICAgIGltYWdlUGF0aD17dXNlci5pbWFnZV9wYXRofVxuICAgICAgICAgICAgICAgICAgICBnZW5kZXI9e3VzZXIuZ2VuZGVyfVxuICAgICAgICAgICAgICAgICAgICBhdmF0YXJTaXplPXszM31cbiAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT0nbWctbC0tc20nPlxuICAgICAgICAgICAgICAgICAgICB7dXNlci5maXJzdF9uYW1lfSB7dXNlci5sYXN0X25hbWV9XG4gICAgICAgICAgICAgICAgPC9oND5cbiAgICAgICAgICAgIDwvaGVhZGVyPlxuXG4gICAgICAgICAgICA8TWVzc2FnZXNcbiAgICAgICAgICAgICAgICByZWY9e21lc3NhZ2VzQ29udGFpbmVyfVxuICAgICAgICAgICAgICAgIGlkPXtjb252b0lkfVxuICAgICAgICAgICAgICAgIHNlZW49e3NlZW59XG4gICAgICAgICAgICAgICAgc2Nyb2xsYWJsZT17c2Nyb2xsYWJsZX1cbiAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgIDxNZXNzYWdlQm94XG4gICAgICAgICAgICAgICAgY29udm9JZD17Y29udm9JZH1cbiAgICAgICAgICAgICAgICB1c2VySWQ9e3VzZXJJZH1cbiAgICAgICAgICAgICAgICByZW1vdmVTZWVuPXtyZW1vdmVTZWVufVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9GcmFnbWVudD5cbiAgICApO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3934\n')}}]);